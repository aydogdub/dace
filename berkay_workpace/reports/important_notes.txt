1. CudaEvents are a bit a mix in the codegen. I left it as an attribute in the GPUStreamManager class, but I do not work with CudaEvents.
   I left it there because it may be implemented in future and more importantly, the GPU code template (in get_generated_codeobject())
   depends on it. Instead of removing it, I decided to let it be and just say 0 CudaEvents are created and used.
   Generally: The CudaStreamManager assumes that the NaiveGPUScheduler pass was called before.
   Also, the CudaStreamManager should define the functions "get_stream_edge" (and maybe "get_stream_node"), since the the copystrategies might
   depend on it

2. I think we should rename ExperimentalCUDACodegen to ExperimentalGPUCodegen (or similarly, rename CUDACodeGen to GPUCodeGen), since it
   is also intended to handle HIP code. However, this should be verified for HIP first. Otherwise, it might be better to build two separate
   codegens â€” this is confusing as it stands.

3. "Struct" memory copies in old codegen are hacks. These are omitted in the new ExperimentalCUDACodegen, because they should be implemented
   in a planned and structured way, which is out of scope for my Master's Thesis.
